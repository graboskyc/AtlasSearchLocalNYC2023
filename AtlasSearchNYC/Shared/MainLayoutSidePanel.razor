<button class="btn btn-mist btn-toggler @ShouldShiftLeft" @onclick="ToggleMenu">
    <span class="material-symbols-outlined">menu</span>
    <span class="material-symbols-outlined">@materialIcon</span>
</button>

<div class="side-panel fadeIn @NavMenuCssClass">
    <div class="scrollable">
        <h1>Rapid Development Menu</h1>

        <p>Welcome expert programmer!</p>
        
        <p>With the click of single button in this menu, you can iterate through several versions of this application to 
            continually refine the user experience (UX). In doing so, what happens behind the scenes is new refinements will 
            be made to the Atlas Search Index to introduce new features to the application. Each version is a superset 
            of features from the last.</p>

        <p>Get developin'</p>

        <ul>
            <li><a href="/Search01">Version 1</a> - This will use standard MongoDB "<code>FindOne</code>" or "<code>$match</code>" database queries without Atlas Search. 
                It will require an exact match of an ObjectID to find anything.</li>

            <li><a href="/Search02">Version 2</a> - Our first iteration of using Atlas Search using a 
                <a href="https://github.com/graboskyc/AtlasSearchLocalNYC2023/blob/main/Indexes/default.json" target="_blank">default index</a>.
                <ul>
                    <li>If you didn't have Atlas Search built in, you may need something like <button class="btn btn-success btn-sm"  @onclick="@(e =>ShowModalArch = true)">this</button></li>
                    <li>All we had to do to turn this on is press five mouse clicks like <button class="btn btn-success btn-sm"  @onclick="@(e =>ShowModalIndex = true)">this</button></li>
                </ul>    
            </li>

            <li><a href="/Results03/ghostbusters">Version 3</a> - Introduces showing the search score and highlighting to the user so the user 
                can understand relevance. It also uses custom sorting to sort by year rather than relevance. It uses a 
                <a href="https://github.com/graboskyc/AtlasSearchLocalNYC2023/blob/main/Indexes/sort.json" target="_blank">refined index</a> 
                that only indexes the fields used (<code>fullplot</code>, <code>title</code>, and <code>year</code>).</li>

            <li><a href="/Results04/ghostbusters">Version 4</a> - Adds a recommendation engine utilizing MoreLikeThis inside the Search stage. The 
                <a href="https://github.com/graboskyc/AtlasSearchLocalNYC2023/blob/main/AtlasSearchNYC/Shared/MLT.razor#L62-L65" target="_blank">code to do so</a> 
                is easy.</li>

            <li><a href="/Results05">Version 5</a> - People are lazy so this adds an autocompelte to the text box. This requires a slight 
                <a href="https://github.com/graboskyc/AtlasSearchLocalNYC2023/blob/main/Indexes/autocomplete.json" target="_blank">refinement</a> 
                to the index.</li>

            <li><a href="/Results06">Version 6</a> - Now we are really showing off. This brings all the features together. We have autocompelte, 
            the search, highlighting, MoreLikeThis, sorting, and more. But now we added facets. We can keep using the same index as before, but instead 
            of issuing a <code>$search</code> aggregation, we can use a <code>$searchmeta</code> stage to get metadata. In this case, we are faceting (getting a list of) the 
            <code>genre</code>s and <code>cast</code> in the results, building that into a selectable list, and then can compound our search with any 
            that were selected. Lastly, we can use facets for another interesting use case by enhancing our recommendation engine to recommend other movies 
            with a specific cast member.</li>

            @if(!String.IsNullOrEmpty(Environment.GetEnvironmentVariable("OPENAIAPIKEY"))) {
                <li><a href="/Results07/capture%20poltergeists%20in%20a%20city">Version 7</a> - <i>Vector Search</i> - Up until this point we have been doing basic lexical 
                or keyword search. That is to say, the words you are searching for should be in the corpus of text you are searching against. There are basic exceptions around 
                word stemming that we covered earlier, or interjecting a custom list of synonyms. However the main story remains. With vector search, we are crossing into semantic 
                search. Instead of using the words themselves, a machine learning model is used to understand the search based on the meaning of the words, not the characters in the 
                words themselves. Thus in previous examples, we have searched for variations on <code>ghost</code> to find <code>Ghostbusters</code>. Now we will be searching for 
                <code>poltergeist</code> which, although a synonym, we have not explicitly told Atlas Search it is a synonym, the word itself is not in the corpus of text being searched, 
                and the ML model must be used to figure out what we are intending to search for. The process to do this is that we do not send the search the user typed in directly to the 
                Atlas Search engine. Instead we must first send it through the ML model which converts it to a list of numbers representing the meaning of the search query. These 
                numbers are then sent to the search itself. To see an example of the workflow, click <button class="btn btn-success btn-sm" @onclick="@(e =>ShowModalVector = true)">here</button> and to see the code 
                that powers it, look <a href="https://github.com/graboskyc/AtlasSearchLocalNYC2023/blob/main/Indexes/vector.json" target="_blank">at the index</a>.</li>
            }
        </ul>
    </div>
</div>

@if(ShowModalArch) {
<GenericBasicModal Title="Traditional Search" ShowModal=@ShowModalArch >
    <center>
        <img src="/Assets/Diagram.gif" style="width:75vw;" />
    </center>
</GenericBasicModal>
}

@if(ShowModalIndex) {
<GenericBasicModal Title="Five Clicks to Search" ShowModal=@ShowModalIndex >
    <center>
        <img src="/Assets/MakeIndex.gif" style="width:75vw;" />
    </center>
</GenericBasicModal>
}

@if(ShowModalVector) {
<GenericBasicModal Title="Vector Search" ShowModal=@ShowModalVector >
    <center>
        <img src="/Assets/Vector.png" style="width:75vw;" />
    </center>
</GenericBasicModal>
}

@code {
    [Parameter]
    public bool OpenOnLoad { get; set; } = false;

    bool isVisible = false;

    private string? NavMenuCssClass => !isVisible ? "collapse" : null;
    private string? ShouldShiftLeft => !isVisible ? "dontshiftleft" : "shiftleft";
    private string materialIcon => !isVisible ? "keyboard_double_arrow_left" : "keyboard_double_arrow_right";

    private bool ShowModalArch, ShowModalIndex, ShowModalVector = false;

    private void ToggleMenu() {
        isVisible = !isVisible;
    }

    protected override async Task OnInitializedAsync()   {
        isVisible = OpenOnLoad;
    }
}