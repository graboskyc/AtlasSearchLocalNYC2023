@using MongoDB.Bson;
@using MongoDB.Driver;
@using AtlasSearchNYC.Datamodels;
@using System;

@if(_M != null) {
    <h1>@_M.Title</h1>
    <div class="table-responsive">
        <table class="table table-hover">
            <tr>
                <th class="bg-leafy">Year</th>
                <td>@_M.Year</td>
            </tr>
            <tr>
                <th class="bg-leafy">Poster</th>
                <td><img src="@_M.PosterImageUrl" height="200" /></td>
            </tr>
            <tr>
                <th class="bg-leafy">Plot</th>
                <td>@_M.FullPlot</td>
            </tr>
            <tr>
                <th class="bg-leafy">Genres</th>
                <td>
                    <ul>
                        @foreach(var g in @_M.Genres) {
                            <li>@g</li>
                        }
                    </ul>
                </td>
            </tr>
            <tr>
                <th class="bg-leafy">Cast</th>
                <td>
                    @foreach(var a in @_M.Cast) {
                        <button class="btn btn-sm btn-leafy" @onclick="@(e => GetCommonCast(a))">@a</button>
                    }
                    @if(_F != null) {
                        <p>If you like @_F.Cast[0].Key you may also like: </p>
                        <ul>
                            @foreach(var fb in _F.Cast) {
                                @if(_F.Cast[0].Key != fb.Key) {
                                    <li>@fb.Key (@fb.Count)</li>
                                }
                            }
                        </ul>
                    }
                </td>
            </tr>
        </table>
    </div>
}


@code {
    [Parameter]
    public ObjectId SourceMovieId {get; set;}
    [Parameter]
    public EventCallback<string> OnMovieClickCallback { get; set; }

    private Datamodels.FullMovie _M {get;set;} = null;

    private Datamodels.FacetResponse _F {get;set;} = null;


    protected override async Task OnInitializedAsync()
    { 
        string MDBCONNSTR = Environment.GetEnvironmentVariable("MDBCONNSTR");
        var settings = MongoClientSettings.FromConnectionString(MDBCONNSTR);
        settings.ServerApi = new ServerApi(ServerApiVersion.V1);
        var client = new MongoClient(settings);
        var database = client.GetDatabase("sample_mflix");
        var col = database.GetCollection<Datamodels.FullMovie>("movies"); 

        var filter = Builders<FullMovie>.Filter.Eq("_id", SourceMovieId);
        _M = await col.Find(filter).FirstOrDefaultAsync();
    }

    private async Task GetCommonCast(string actor) {

        var pipeline = new BsonDocument[] {
            new BsonDocument("$searchMeta", 
            new BsonDocument
                {
                    { "index", "facets" }, 
                    { "facet", 
            new BsonDocument
                    {
                        { "operator", 
            new BsonDocument("phrase", 
            new BsonDocument
                            {
                                { "path", "cast" }, 
                                { "query", actor }
                            }) }, 
                        { "facets", 
            new BsonDocument("castFacet", 
            new BsonDocument
                            {
                                { "type", "string" }, 
                                { "path", "cast" }
                            }) }
                    } }
                }),
            new BsonDocument("$project", 
            new BsonDocument("castFacetBuckets", "$facet.castFacet.buckets"))
        };
        
        string MDBCONNSTR = Environment.GetEnvironmentVariable("MDBCONNSTR");
        var settings = MongoClientSettings.FromConnectionString(MDBCONNSTR);
        settings.ServerApi = new ServerApi(ServerApiVersion.V1);
        var client = new MongoClient(settings);
        var database = client.GetDatabase("sample_mflix");
        var col = database.GetCollection<Datamodels.FacetResponse>("movies"); 

        var result = await col.Aggregate<Datamodels.FacetResponse>(pipeline).ToListAsync();
        _F = result[0];       

    }
}