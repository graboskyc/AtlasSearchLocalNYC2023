@using MongoDB.Bson;
@using MongoDB.Driver;
@using AtlasSearchNYC.Datamodels;
@using System;

@if(ShowButton) {
    <center><button class="btn btn-leafy btn-sm" @onclick="RunSearch">Find More Like This</button></center>
} else {
    @if(similarMovies != null) {
        @foreach (var t in similarMovies)
        {
            @if(t.PosterImageUrl != null) {
                <img class="moviePoster" src="@t.PosterImageUrl" width="50px" @onclick=@(e => MovieClick(t.Title)) />
            } else {
                <div class="moviePoster"  @onclick=@(e => MovieClick(t.Title))>@t.Title</div>
            }
        }
    } else {
        <p>This is unique!</p>
    }
}


@code {
    [Parameter]
    public Datamodels.Movie SourceMovie {get; set;}
    [Parameter]
    public EventCallback<string> OnMovieClickCallback { get; set; }

    private List<Datamodels.Movie> similarMovies = null;

    private bool ShowButton = true;

    protected override async Task OnInitializedAsync()
    { 
        ShowButton = true;
    }

    protected override void OnParametersSet()
    {
        // movie input changed
        ShowButton = true;
    }


    private async Task MovieClick(string title) {
        Console.WriteLine("MLT - MovieClick " + title);
        await OnMovieClickCallback.InvokeAsync(title);
        StateHasChanged();
    } 

    private async Task RunSearch() {
        ShowButton = false;

        string MDBCONNSTR = Environment.GetEnvironmentVariable("MDBCONNSTR");
        var settings = MongoClientSettings.FromConnectionString(MDBCONNSTR);
        settings.ServerApi = new ServerApi(ServerApiVersion.V1);
        var client = new MongoClient(settings);
        var database = client.GetDatabase("sample_mflix");
        var col = database.GetCollection<Datamodels.Movie>("movies"); 

        var result = await col.Aggregate()
            .Search(Builders<Datamodels.Movie>.Search.MoreLikeThis(SourceMovie))
            .Limit(5)
            .ToListAsync();

        //var result = await col.Aggregate<Datamodels.Movie>(pipeline).ToListAsync();
        result.RemoveAt(0); // pop first result which is itself
        similarMovies = result;

    }
}