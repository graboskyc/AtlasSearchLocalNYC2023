@page "/Results06/{SearchTerm}"
@page "/Results06"
@inject NavigationManager NavigationManager
@using MongoDB.Bson;
@using MongoDB.Driver;
@using AtlasSearchNYC.Datamodels;
@using System;
@using MongoDB.Bson.IO;

<PageTitle>Content</PageTitle>

<div class="row">
    <h1>Search Results</h1>
</div>

<div class="row">
    <div class="col-auto">
        <h2><label for="ddl" class="form-label">Sort By</label></h2>
        <div class="input-group">
            <select class="form-select form-select-lg sortbox" id="ddl" @onchange=ChangeSort>
                <option>Score</option>
                <option>Release Year</option>                
            </select>
        </div>
    </div>

    <div class="col-auto">
        @if(facet != null) {
            <h2>Genres</h2>
            <div class="form-check">
                <select class="form-select" name="genres" id="genres" @bind="SelectedGenres" multiple>
                    @foreach (var f in facet.Genres)
                    {
                        <option value="@f.Key">@f.Key (@f.Count)</option>
                    }
                </select>
            </div>
        }
    </div>

    <div class="col-auto">
        @if(facet != null) {
            <h2>Cast</h2>
            <div class="form-check">
                <select class="form-select" name="cast" id="cast" @bind="SelectedCast" multiple>
                    @foreach (var f in facet.Cast)
                    {
                        <option value="@f.Key">@f.Key (@f.Count)</option>
                    }
                </select>
            </div>
        }
    </div>

    <div class="col-auto">
        <button class="btn btn-lg btn-leafy" @onclick=RunSearchButton>Search</button>
    </div>
</div>

<div class="row">
    <SearchBarAutocomplete SearchTerm="@SearchTerm" Redirect="Results06"  OnSearchCallback="@ChangeSearchTerm" ShowSuggestions=false />
</div>

<div class="row" style="margin-top:20px;">
    @if(movies != null) {
        @foreach (var t in movies)
        {
            <MovieTile SourceMovie=@t ShowSearchScore=true ShowMLT=true ChangeSearchCallback="@ChangeSearchTerm" ShowMovieDetails=true LearnMoreCallback="@OpenMovieModal" />
        }
    }
</div>

@if(ShowModal) {
<div class="modal" tabindex="-1" style="display:block;top:5vh;">
  <div class="modal-dialog">
    <div class="modal-content" style="border-radius: 2rem; box-shadow:  29px 29px 57px #636363,             -29px -29px 57px #ffffff; ">
      <div class="modal-header">
        <h5 class="modal-title">Movie Details</h5>
        <button type="button" class="btn-close" @onclick=ToggleModal ></button>
      </div>
      <div class="modal-body">
        <MovieDetails SourceMovieId=SelectedMovieId />
      </div>
    </div>
  </div>
</div>
}


@code {
    [Parameter]
    public string SearchTerm {get; set;} = null;
    private List<Datamodels.Movie> movies = new List<Movie>();
    private Datamodels.FacetResponse facet = null;
    private string SortBy = "Score";
    
    private string[] SelectedGenres { get; set; } = new string[] { };
    private string[] SelectedCast { get; set; } = new string[] { };

    private ObjectId SelectedMovieId;
    private bool ShowModal = false;

    private void ToggleModal() {
        ShowModal = !ShowModal;
    }

    protected async void ChangeSort(ChangeEventArgs e) {
        SortBy = e.Value.ToString();
        await RunSearch();
        await RunFacets();
    }

    protected override async Task OnInitializedAsync()
    { 
        if(SearchTerm != null) {
            await RunSearch();
            await RunFacets();
        }

    }

    private async void RunSearchButton() {
        NavigationManager.NavigateTo("/Results06/" + SearchTerm);
        await RunSearch();        
        await RunFacets();
    }

    private async void ChangeSearchTerm(string term) {
        Console.WriteLine("R06 - ChangeSearchTerm " + term);
        SearchTerm = term;
        NavigationManager.NavigateTo("/Results06/" + SearchTerm);
        await RunSearch();        
        await RunFacets();
    }

    private async void OpenMovieModal(ObjectId id) {
        Console.WriteLine("R06 - Open Modal");
        SelectedMovieId = id;
        ShowModal = true;
        StateHasChanged();
    }

    private async Task RunSearch() {

        List<BsonDocument> p = new List<BsonDocument>();
        
        var searchStage = new BsonDocument();
        searchStage.Add(new BsonDocument("index","facets"));

        var basicSearch = new BsonDocument("text",  new BsonDocument {
                { "query", SearchTerm }, 
                { "fuzzy", new BsonDocument() }, 
                { "path", 
                    new BsonArray {
                        "title",
                        "fullplot"
                    } 
                }
        });

        @if(SelectedCast.Length==0 && SelectedGenres.Length==0) {
            searchStage.Add(basicSearch);
        } else {
            var filter = new List<BsonDocument>();
            
            if(SelectedCast.Length > 0) {
                var cbarray = new BsonArray();
                cbarray.AddRange(SelectedCast);
                var castDoc = new BsonDocument("text", new BsonDocument{
                    {"path","cast"},
                    {"query",cbarray}
                });
                filter.Add(castDoc);
            }

            if(SelectedGenres.Length > 0) {
                var cgarray = new BsonArray();
                cgarray.AddRange(SelectedGenres);
                var genDoc = new BsonDocument("text", new BsonDocument{
                    {"path","genres"},
                    {"query",cgarray}
                });
                filter.Add(genDoc);
            }

            var fbarray = new BsonArray();
            fbarray.AddRange(filter);
            searchStage.Add(new BsonElement("compound", new BsonDocument {
                new BsonElement( "filter", fbarray),
                new BsonElement( "must", new BsonArray { basicSearch})
                }
            ));
            
        }

        @if(SortBy != "Score") {
            searchStage.Add("sortBetaV1", new BsonDocument("year", -1) );
        }

        searchStage.Add("highlight", new BsonDocument(
                "path", 
                new BsonArray
                {
                    "fullplot",
                    "title"
                })
        );
        p.Add(new BsonDocument("$search", searchStage));

        
        p.Add(new BsonDocument("$project", 
                new BsonDocument
                    {
                        { "title", 1 }, 
                        { "fullplot", 1 }, 
                        { "year", 1 }, 
                        { "genres", 1 }, 
                        { "poster", 1 }, 
                        { "score", 
                new BsonDocument("$meta", "searchScore") }, 
                        { "highlights", 
                new BsonDocument("$meta", "searchHighlights") }
                    }));

        p.Add(new BsonDocument("$limit", 25));     

        var jsonWriterSettings = new JsonWriterSettings { OutputMode = JsonOutputMode.Strict }; // key part
        Console.WriteLine(p.ToJson(jsonWriterSettings));

        string MDBCONNSTR = Environment.GetEnvironmentVariable("MDBCONNSTR");
        var settings = MongoClientSettings.FromConnectionString(MDBCONNSTR);
        settings.ServerApi = new ServerApi(ServerApiVersion.V1);
        var client = new MongoClient(settings);
        var database = client.GetDatabase("sample_mflix");
        var col = database.GetCollection<Datamodels.Movie>("movies"); 

        var result = await col.Aggregate<Datamodels.Movie>(p.ToArray()).ToListAsync();
        movies = result;

    }

    private async Task RunFacets() {
        var pipeline = new BsonDocument[] {
            new BsonDocument("$searchMeta", 
                new BsonDocument
                    {
                        { "index", "facets" }, 
                        { "facet", 
                new BsonDocument
                        {
                            { "operator", 
                new BsonDocument("text", 
                new BsonDocument
                                {
                                    { "path", 
                new BsonArray
                                    {
                                        "fullplot",
                                        "title"
                                    } }, 
                                    { "query", SearchTerm }
                                }) }, 
                            { "facets", 
                new BsonDocument
                            {
                                { "genresFacet", 
                new BsonDocument
                                {
                                    { "type", "string" }, 
                                    { "path", "genres" }
                                } }, 
                                { "castFacet", 
                new BsonDocument
                                {
                                    { "type", "string" }, 
                                    { "path", "cast" }
                                } }
                            } }
                        } }
                    }),
                new BsonDocument("$project", 
                new BsonDocument
                    {
                        { "genresFacetBuckets", "$facet.genresFacet.buckets" }, 
                        { "castFacetBuckets", "$facet.castFacet.buckets" }
                    })
        };
        
        string MDBCONNSTR = Environment.GetEnvironmentVariable("MDBCONNSTR");
        var settings = MongoClientSettings.FromConnectionString(MDBCONNSTR);
        settings.ServerApi = new ServerApi(ServerApiVersion.V1);
        var client = new MongoClient(settings);
        var database = client.GetDatabase("sample_mflix");
        var col = database.GetCollection<Datamodels.FacetResponse>("movies"); 

        var result = await col.Aggregate<Datamodels.FacetResponse>(pipeline).ToListAsync();
        facet = result[0];

    }
}